3.1.1. В редакторе кода, в частности Visual Studio Code, был открыт новый файл. В нем был написан код, соответствующий требованиям задания. Для создания визуальной документации процесса кодирования использовался плагин CodeSnap, позволяющий делать скриншоты кода непосредственно в редакторе.
3.1.2.1. В качестве отправной точки был взят код из предыдущего упражнения. Чтобы избежать полного переписывания основных тегов, в существующий код были внесены необходимые изменения в соответствии с требованиями задания. Содержимое тега <title> было заменено на новое. Далее, в тег <body> были добавлены два абзаца текста, заключенные в тег <p>. Ко второму абзацу был добавлен атрибут align со значением "center", чтобы выровнять текст по центру.
3.1.2.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. Проведенный анализ показал, что текст, введенный в тег <title>, отображался в качестве заголовка вкладки браузера. На самой веб-странице отображались два абзаца текста, разделенные промежутком. Выравнивание второго абзаца было отцентрировано благодаря использованию атрибута align.
3.1.3.1. На основе кода из предыдущего упражнения в теге <head> был добавлен тег <style> для описания стилей страницы. Были определены стили для классов cen и jtf. Для обозначения класса перед названиями классов была поставлена точка, после чего в фигурных скобках были указаны стили для каждого класса. В обоих классах определялось выравнивание текста: в одном - по центру, в другом - по ширине. Для применения стилей к абзацам был использован атрибут class со значением, соответствующим названию класса. Атрибут align был удален из второго абзаца, так как его функциональность была заменена классом со стилями выравнивания.
3.1.3.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. Наблюдаемый результат соответствовал ожиданиям - он остался без изменений. Второй абзац отображался идентично тому, как он отображался при использовании атрибута align.
3.1.4.1. Был создан новый код в соответствии с заданием. В теге <body> были введены шесть вариантов заголовков, использовались теги <h1> – <h6> для их обозначения.
3.1.4.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. Визуальный осмотр показал, что каждый заголовок отличался только размером. Заголовок <h1> был самым большим, а <h6> - самым маленьким.
3.1.5.1. Был создан новый код в соответствии с заданием. В теге <body> был добавлен текст, в котором определенный фрагмент был выделен с помощью тега <em>.
3.1.5.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. В результате просмотра веб-страницы было отмечено, что выделенный фрагмент текста, заключенный в тег <em>, отображался курсивом.
3.1.6.1. Был создан новый код в соответствии с заданием. В теге <body> был добавлен текст, в котором определенные фрагменты были выделены с помощью тегов <strong> и <b>.
3.1.6.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. Наблюдение за результатом показало, что оба тега - <strong> и <b> - выделяли текст полужирным шрифтом.
3.1.7.1. В теге <body> был введен текст. Фрагменты текста, которые требовалось выделить дополнительно, были обернуты в тег <span>. Первому тегу <span> был присвоен класс ital, а второму - класс wei. Затем, в теге <head> был добавлен тег <style>. Внутри тега <style> была определена стилизация для созданных классов.  Для класса ital был задан параметр font-style: italic, что должно было привести к отображению текста курсивом.  Для класса wei был задан параметр font-weight: bold, что должно было привести к отображению текста полужирным шрифтом.
3.1.7.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. В результате, оба фрагмента текста отображались с соответствующим стилем - один курсивом, другой полужирным шрифтом, что было достигнуто с помощью применения стилей CSS.
3.1.8.1. На основе кода из шестого упражнения теги для выделения текста были дополнительно обернуты в тег <font>. Атрибуту face были присвоены значения шрифтов "Calibri" для одного случая и "Tahoma" для другого. В атрибуте color был указан цвет текста, в виде названия цвета или HEX-кода. Кроме того, был изменен цвет фона страницы с помощью тега bgcolor со значением цвета, добавленного в тег <body>.
3.1.8.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае Google Chrome. Наблюдения показали, что цвет фона страницы изменился на бледно-желтый. Выделенные фрагменты текста также отображались с изменениями: они использовали другие шрифты и имели зеленый и красный цвета, как и было указано в коде.
3.1.9.1. Предыдущий код был переписан с использованием стилизации через CSS. Весь текст был обернут в тег <div> для добавления фона. Этому тегу <div> был присвоен класс fon для последующей стилизации. Теги <font>, <b>, и <strong> были удалены. Вместо них использовались теги <span>, которым были присвоены классы ital и wei. Затем в теге <head> был открыт тег <style>. Для тега body был указан параметр background-color: #f9f2e3, чтобы изменить цвет фона страницы на бледно-желтый. Была прописана стилизация для классов ital и wei. Для класса ital были заданы параметры font-style: italic и color: red. Для класса wei были заданы параметры font-weight: bold и color: #11ff11. Наконец, для класса fon был прописан параметр background-color: #f9f2e3, чтобы изменить цвет фона текста.
3.1.9.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. Визуальный осмотр показал, что выделение текста осталось прежним, за исключением незначительных изменений в цвете. Также было отмечено, что текст приобрел бледно-розовый фон.
3.1.10.1. Был создан новый код. В коде был введен заголовок с использованием тега <h3>. Затем была начата реализация нумерованного списка. Для этого использовался тег <ol>. Внутри этого тега был добавлен небольшой заголовок с помощью тегов <font> и <b> с указанием шрифта Tahoma. Далее был реализован сам список с использованием тега <li> для каждого пункта списка.
3.1.10.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае Google Chrome. Результатом выполнения кода стал нумерованный список из трех пунктов, пронумерованных арабскими цифрами.
3.1.10.3. Была предпринята попытка реализации того же нумерованного списка, но с использованием CSS вместо тега <font>. Тег <font> был заменен на <span> с классом wei. Для этого класса были прописаны стили: font-family: Tahoma и font-weight: bold.
3.1.10.4. Сохраняем код в формате .html и запускаем его через любой браузер, в нашем случае Google Chrome. Получаем абсолютно тот же результат.
3.1.11.1. Был создан код для маркированного списка с тремя видами маркеров и синими заголовками под каждым списком. Использовался тег <ul> для создания маркированного списка, пункты создавались аналогично нумерованному списку.  Для каждого из трех списков были присвоены классы: dis, cir и squ, чтобы задать разные типы маркеров. В начале каждого списка были добавлены заголовки с помощью тега <span> и классом h.
Затем была выполнена стилизация. Для класса h были прописаны следующие параметры: color: blue, font-size: large и font-weight: bold. Для каждого класса списков (dis, cir и squ) был задан параметр list-style-type с различными значениями: disc, circle и square соответственно.
3.1.11.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. В результате, был получен ожидаемый результат: три маркированных списка с различными типами маркеров (круг, диск и квадрат) и синими заголовками.
3.1.12.1. Был создан код, предназначенный для отображения маркированного списка, в котором в качестве маркеров используются изображения. В теге <body> был добавлен маркированный список с использованием тегов <ul> и <li>. Затем в теге <head> был добавлен тег <style>, в котором были определены стили для маркированного списка, а именно для тега <ul>. Был использован атрибут list-style-image, которому было присвоено значение url(). В скобках url() была указана ссылка на изображение. Так как изображение располагалось в той же папке, что и файл с кодом, был указан только файл изображения. 
3.1.12.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. В результате на странице отобразился маркированный список, в котором в качестве маркеров выступали изображения, указанные в коде.
3.2.1.1. Был создан новый код, предназначенный для верстки веб-страницы в соответствии с заданным макетом. Страница начиналась с белого заголовка на синем фоне. Для создания этого заголовка использовался тег <h1> с классом h. Использование класса было выбрано, поскольку на странице присутствовал еще один заголовок с аналогичным стилем, за исключением размера, для которого был использован тег <h2>.
После заголовка размещался текст с отступами сверху и снизу, поэтому он был написан в теге <p>. В тексте присутствовали фрагменты, выделенные курсивом. Для их реализации эти фрагменты были обернуты в тег <span> с классом ita. Второй абзац был выровнен по центру, поэтому тегу <p>, содержащему этот абзац, был присвоен класс cen. В оставшихся абзацах текста были выделены цветом фрагменты, обернутые в тег <span> с классами red-text и blue-text.
Далее были определены стили CSS. Для класса h, отвечающего за заголовки, были заданы атрибуты color: white и background-color: blue. Для класса ita был задан атрибут font-style: italic. Центрирование текста было реализовано с помощью класса cen, для которого был задан параметр text-align: center. Для классов red-text и blue-text, предназначенных для выделения цветом, использовался один и тот же параметр color, но с разными значениями: darkred и darkblue соответственно.
3.2.1.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. В результате отобразилась веб-страница, внешний вид которой соответствовал заданному макету. На странице отображались белые заголовки на синем фоне, присутствовали выделения курсивом и цветами в тексте, а второй абзац был выровнен по центру.
3.2.2.1. Был создан новый код, реализующий пример из задания. В начале страницы использовался тег <h1> для заголовка. После заголовка была добавлена разделительная линия с использованием тега <hr>. Далее был создан нумерованный список, в котором использовались римские цифры. Для этого в тег <ol> был добавлен атрибут type="I". Внутри нумерованного списка располагался маркированный список, реализованный через тег <ul>. Для изменения маркера этому списку был присвоен класс squ, стили для которого были определены позднее. Элементы списков были указаны с использованием тега <li>. После первого списка была добавлена еще одна разделительная линия. Затем был добавлен еще один список, для чего был скопирован код предыдущего списка. В этом списке первый уровень списка использовал заглавные латинские буквы, для чего было изменено значение атрибута type на "A". Для второго уровня списка вместо маркера была использована картинка, поэтому класс был изменен на img. Далее был добавлен еще один заголовок, после которого следовала разделительная линия. В конце страницы был добавлен третий список с нумерованными римскими цифрами на первом уровне и арабскими цифрами на втором. Для этого был скопирован код первого списка и изменен тег <ul> на <ol> на втором уровне.
Затем была выполнена стилизация. Внутри тега <head> был открыт тег <style>. Для разделительной линии были скопированы стили, указанные в задании. Классу squ был присвоен атрибут list-style-type: square. Для класса img был указан параметр list-style-image: url(), где в скобках была указана ссылка на изображение.
3.2.2.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. На итоговой веб-странице отобразились три списка с различными типами маркеров и нумерации, заголовки и красные разделительные линии, соответствующие требованиям задания.



4.1.1.1. Был создан новый код в соответствии с заданием. В этом коде цвет фона страницы был изменен с помощью атрибута bgcolor в теге <body>. Кроме того, цвета ссылок для различных состояний были изменены с помощью атрибутов link, alink и vlink. Заголовок был стилизован с использованием тега <font>. Разделительная полоса была стилизована с использованием атрибутов color, width и align в теге <hr>. Абзац текста располагался внутри тегов <p> и <font>. В теге <font> шрифт был изменен с помощью атрибута face, а размер текста - с помощью атрибута size. Для указания ссылки в тексте использовался тег <a>, в котором атрибуту href была присвоена соответствующая ссылка. Внутри самого тега <a> был написан текст, который отображался на странице и был кликабельным. Для дополнительного выделения текст ссылки был помещен в тег <b>, что сделало его полужирным.
4.1.1.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. На странице отобразились заголовок, разделительная линия и текст. В тексте находилась ссылка, выделенная красным полужирным шрифтом. В активном состоянии ссылка оставалась того же цвета, так как были указаны одинаковые цвета для обычного и активного состояний. После посещения сайта, на который вела ссылка, ее цвет менялся на синий, что соответствовало заданным параметрам.
4.1.2.1. Была предпринята попытка создать ту же веб-страницу, но с использованием CSS для стилизации. Из тега <body> и <hr> были удалены все атрибуты. Тег <font>, использовавшийся для стилизации заголовка, был заменен на <h1>. Из абзаца были удалены теги <font>, а тег <b> был заменен на <span> с классом wei. К тегу <p> был добавлен класс text.
В разделе стилей для тега <body> был задан параметр background-color: #f8f8ff, чтобы изменить цвет фона страницы. Для стилизации ссылок были использованы псевдоклассы :link, :active и :visited тега <a>, каждому из которых были установлены необходимые цвета. Для полосы и класса wei были скопированы ранее написанные стили из предыдущих заданий. Для класса text были установлены шрифт и размер с помощью параметров font-family и font-size, а для тега h1 был задан серый цвет текста.
4.1.2.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. В результате была получена практически идентичная страница. Разница заключалась только в отступах у заголовка и незначительно отличающейся толщине разделительной полосы.
4.1.3.1. Был создан новый код в соответствии с заданием. Код начинался с текста, в середине которого был вставлен тег <img>. Этот тег содержал атрибуты: src (ссылка на изображение), align (выравнивание), width (ширина) и height (высота). В данном задании основное внимание уделялось атрибуту align, который позволял выровнять изображение по верхней границе, по центру или по нижней границе. После текста были добавлены новые абзацы с использованием тега <p>. В каждый из этих абзацев также было вставлено изображение, однако теперь для атрибута align указывались другие значения.
4.1.3.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. На странице было отмечено, что изображение в разных абзацах было выровнено по-разному, что было достигнуто за счет использования различных значений атрибута align.
4.1.4.1. Была предпринята попытка реализовать ту же функциональность, но с использованием CSS. Стили указывались непосредственно в атрибуте style тега <img>. Для всех изображений использовался только один параметр стиля - vertical-align. Значения этого параметра были последовательно выставлены в text-top, middle и text-bottom для каждого изображения.
4.1.4.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. Отображаемый результат был идентичен предыдущему: изображения были выровнены вертикально в соответствии с заданными значениями.
4.1.5.1. Был скопирован код, предоставленный в задании. Также были добавлены стили, указанные в задании. Далее был проведен анализ кода. В текст было вставлено изображение, имеющее следующие атрибуты: width и height, отвечающие за размеры изображения; src - ссылка на изображение; alt - текст, который отображается вместо изображения, если оно не загружается; title - заголовок изображения.
Далее были рассмотрены стили. Для всей страницы были заданы отступы в 20 пикселей. Выравнивание текста было выполнено по ширине, а заголовок был выровнен по центру. Для изображения был установлен отступ в 25 пикселей слева, а также использован параметр float: right, что размещало изображение справа.
В тексте для отображения символов < и > использовалась кодировка, что позволяло избежать их интерпретации как элементов HTML-разметки.
4.1.5.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. На странице отобразилось изображение, обтекаемое текстом слева и снизу. Символы < и > также отображались корректно благодаря использованию кодировки &lt; и &gt;.
4.1.6.1. Была предпринята попытка реализации изображения, являющегося ссылкой. Для этого были созданы несколько абзацев с использованием тега <p>. В каждом абзаце было размещено по две ссылки с использованием тега <a>. В первой ссылке располагалось изображение, а во второй - текст. Для вставки изображения вместо текста в содержимом тега <a> был использован тег <img>, в котором были указаны необходимые атрибуты (src, alt, width). В стилях было указано выравнивание по центру для изображений для достижения более эстетичного результата.
4.1.6.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. В результате, каждое изображение при нажатии перенаправляло на ссылку, указанную в коде. Текст, располагавшийся справа от каждого изображения, также выполнял функцию ссылки.
4.1.7.1. Был создан код для веб-страницы-справочника по трем HTML-тегам. В начале страницы располагался заголовок <h1>, затем - разделительная линия с классом hr1. Далее следовали три ссылки на различные части страницы, созданные с помощью тега <a>. В качестве ссылок были указаны идентификаторы (id) элементов, расположенных ниже на странице. После каждой ссылки был добавлен перенос строки с помощью тега <br>. Каждому тегу <a> был присвоен класс mrg для задания отступа. Верхняя часть страницы была завершена еще одной разделительной линией с классом hr2.
Следующим этапом было создание блоков с описаниями каждого тега. В начале каждого блока располагался зеленый, курсивный и полужирный заголовок с отступом слева. Для реализации этих элементов использовался тег <span>, которому были присвоены сразу несколько классов: mrg (для отступа), green-text (для зеленого цвета и курсива) и wei (для полужирного шрифта). После этого шли другие заголовки, выделенные полужирным шрифтом и имеющие отступ слева. Они также были обернуты в тег <span> с классами wei и mrg. Обычный текст был написан без дополнительных тегов. В конце абзацев и заголовков использовался тег <br> для переноса строки.
В конце каждого блока текста была добавлена ссылка, ведущая наверх страницы, к самому первому заголовку. Этот тег <a> был помещен в тег <div> с классом cen для центрирования. Все остальные блоки были созданы по тому же принципу, с изменением только текста. В начале каждого блока, перед зелеными заголовками, был добавлен атрибут id для ссылок, расположенных в начале страницы.
Далее была реализована стилизация с использованием CSS. К тегу <hr> были заданы общие параметры: width: 90%, height: 2px, border: 0 и margin: 5px 0 5px 0. Цвета были заданы отдельно через классы hr1 и hr2, которым были присвоены значения darkblue и lightgray для атрибута background. Для отступов использовался класс mrg, которому был задан параметр margin-left: 10px. Для зеленого текста использовался класс green-text, которому были присвоены атрибуты color: green и font-style: italic. Выделение полужирным шрифтом было реализовано с помощью класса wei, которому был задан атрибут font-weight: bold. И, наконец, для центрирования текста использовался класс cen, которому был присвоен атрибут text-align: center.
4.1.7.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. Веб-страница отобразилась в соответствии с ожидаемым результатом, аналогичным примеру. Ссылки, расположенные в начале страницы, перенаправляли на начало описания соответствующего тега, а ссылка "Наверх" обеспечивала переход в начало документа.
4.2.1.1. Был создан код для веб-страницы с информацией об HTML. В самом начале был добавлен заголовок h1. Далее располагалось изображение. Затем были добавлены два абзаца текста, заключенные в тег <p>. В тексте встречался фрагмент, выделенный курсивом, поэтому он был помещен в тег <span> с классом ita. После абзаца был добавлен заголовок для списка, для которого использовался тег <span> с классом wei для выделения полужирным шрифтом. Далее следовал маркированный список, в котором маркеры оставались стандартными. Затем опять были добавлены два абзаца текста в теге <p>, во втором из которых встречалась ссылка, реализованная с помощью тега <a>.
Стилизация была выполнена следующим образом: заголовок h1 был отцентрирован с помощью text-align: center. Изображение было выровнено по левому краю с помощью float: left, а также добавлены отступы margin: 0 10px 0 10px.
4.2.1.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. В результате была получена веб-страница, на которой слева располагалось изображение, а справа - текст. Ниже располагался маркированный список и еще два абзаца текста, в одном из которых была добавлена ссылка на веб-сайт.
4.2.2.1. Был создан код для небольшой веб-страницы, содержащей три ссылки. Три ссылки, созданные с помощью тега <a>, были обернуты в тег <p> с классом block, чтобы задать фон. Затем была выполнена стилизация элементов. Для тега <a> с псевдоклассами :link, :active и :visited был задан атрибут color, при этом каждому состоянию ссылки был присвоен свой цвет. Для класса block был указан атрибут background: rgb(49, 49, 49), чтобы задать фон, а также добавлены отступы в 10 пикселей с помощью атрибута padding для увеличения пространства.
4.2.2.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. На экране отобразились три ссылки, размещенные на темном фоне. В зависимости от состояния ссылки (обычное, активное, посещенное) они отображались разными цветами.
4.2.3.1. Был создан код для веб-страницы, демонстрирующей различное расположение текста и изображений. В начале было вставлено изображение с классом img-float-left, которому был задан стиль float: left, что обеспечивало обтекание изображения текстом слева. Далее следовал абзац текста, заключенный в тег <p>, с классом text-left, у которого было задано выравнивание по левому краю. Затем этот код был продублирован, и классы были заменены на соответствующие для создания различных вариантов расположения элементов. Во втором блоке класс text-left был заменен на text-center, что обеспечивало выравнивание текста по центру. В третьем блоке класс text-center был заменен на text-right, что приводило к выравниванию текста по правому краю, а класс img-float-left был заменен на img-float-right с float: right, что приводило к обтеканию изображения текстом справа. Между блоками были добавлены теги <br> для перехода на новую строку. Для тега <br> был задан стиль clear: both, чтобы отменить обтекание элементов.
4.2.3.2. Код был сохранен в формате .html и запущен в веб-браузере, в данном случае, Google Chrome. В результате была получена веб-страница с ожидаемым расположением элементов: изображения располагались по краям (слева и справа), а текст был выровнен по левому краю, по центру и по правому краю в зависимости от блока.
